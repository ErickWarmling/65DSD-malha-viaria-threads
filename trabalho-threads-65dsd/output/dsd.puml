' Generated by UML Generator
' Encoded: jLXjSnCt4FwUNt4p_MBNBqD2eQs7Pd1ijxWJGx1Dse5X6FbEs88xoKWw4qBfR-zAEkcayvtZCl0byUskzaNxx6gbnq8YBlCiFH7l2TqYZh8eJf4GGoavMUKIJsD65-GMH_TEDYJ1KKnudEAJ4oqLBKYMfoX6BFfy4aKzdgD1DC-H-YrnYXnx42tzJyN_a2CgIO8IF4Ct94FNcCHvoiGW8bGg0VY7-GwbR4e5vbg9um21q0GeAyPIZAYY2gjzACaE1IoEG3W3r_J_qFe8SSx4K1aZZ6iRqMyGBGZru4_7ETsoqNMZGx5reuEHTQFwkDhA5izfgps8TemaPPpyATinxQNFOolGSiMeP6AC9rHob235loH2FXhX59mvLofLJhcrv2deG5ubeNazauYftMD5BhUoWscCEQWijyLRjiRoUNLZPOvI9MDo1veNGPvyzLyihFHI0wdFW519uY-HyXSbbGoHn872nzuEfopMJZXsGZZMUpqsFnGjrjkaFHn4PiyK6Upjs1tuqT0mIIbXKJ5Raz9EndOamn09zvE9DnEXCpZ74hKasJBZZL4Jk58g6B5ibYU8ngW8gPLW0IbbDXRFGBaATd-ROd505e4dEom4ME3vBLBBM6lBOJtXh2JLhCGYPka6yn7A2Dsm1OAzEBnoIjyodg6OOL4iqdgeIZQ0hA298pHftE-hEtUreZS965UOPqGXL9YDzfIPpIuqIRp6N2-FKGhr2zveMyQNkCYFeNKZodOs3GvYRHzKLiaLPwed64Oh47c7L8B6JFnEe5kmjqoq62Thd9LcOXDLMERTI2YVxdJ6jGwUO0gUG6UuIDc770CO9RjayVjGhxTaLSWjMG9UtI6SaXNcnybsT6gcYMjlHPT8y5j22NV0RWp6A1YLXHnigTNZyskAtlDTjykmsRgkj8yktQB-hKsAOWHfKOIz9WIwqKgLVYoZelLfOTFxKb2BN0U3siefEjpGbEC3qpvrUnJ5oH2q429yq7iCqzGCCalRWBhISZUgseK3RS-AejNOQ1TdnANIxMKRI2Dj8gJPxBVz6BMmpOyDj2CiqTy13oKSGmV49h5Zh_ZAyyuxGhtJpW-ZmYfGxcknLUBJfEww5nvd_xJJximO9P9na_dCV02ae7ZWiAFuOpJ7MFb8fQArsfM45Sk_Nzw-TRmBd26ef-AO5yNN85BqxOPnN8JjlbkdrPYjYkyALcUaxVdsRJUaSCxkX9gVcElVHRdhi6r5rCYKxleihw0aMy18JzSw3lshT02cbm9tSFYJsnbAD-YQ84xyxjNRXjCciDZsqpFw5oSI3s4c_EJtlo9xjIBd1hswLaMJ6iKyHelU60YWXVY770OtxRmDiHlbCCSi7BWgkPrLmorFZrUlNxrMKYWXCM7K7Wf7z9Sc6TkuX3RI7BCUphKF-eH6v8PLnetWY2j5Hp1N72Ufq47aaS8J0SZbIREqWz7I3QuQJHqtkryFNqwV-ODxoPeiblFXUFXcD9qDhSHfhSHuEfzCbqxeh5ReOZZzsrcwNoioMJn_CPcFdQAV0gdH_CNBuMpoTFaiSEb1ar35guTDSe5ZFpT9LNtxvP1lRoPLwx_U8LvLVthlZh1WJU3uwUd1-EfCd7duu6W5jSQM6uvH8Xu-I4HIGKg628LANWjRmQzUxyrXkbwl4CMfRLgrxMevd0sVFe7O9vSlBfq_zysz4IuOCCLfMJ0rGrixyNUZQORM-jd3TfydI6oKXDzmIXzQDUPLyz0z1ganazm69y8FMuWH1fuC-YaqwzPw4Ft1uLWXiQZUxqUi65shTq8uvlQAaQMCsxQArt2lzsCCdnL8QTxdTF9jWYJUdtpL0yUKGYD4nPQl93NVt7i6UOTswAOlFaBM-dzUv58oFLM-0rihTi5kJYiYblx8PFey43uxHlWIhN1QLQk99VliCFl-OVPFXzbB8lEKDSeijeHIpAiU5cHVvAnPHEFDou11OMCIwt8pZ2MSON3pLHSOdBJmJXfxVVHHzl4ELFIDp4JzzX3nlmepU0VpQbFNoS2hs-fxZIX1zAtU264N9jMdgaQ8Wl2L_qxMZ6NjVZMVBYR3FcjYkqpMlIb-_QkX7cHSEsfND_eWKeAmlnecjRlzzThi6-FacgN-Ina0hOJNZxsUXaz82P-PpJkYbIo_x7Mof1J7XY7q--TrBrCrztzMBgtXzdhdTt2T8sPg2dmhIUQQ6ruJUxr_dFAGexmFbRYhrluYn_9NgUk0jodgazLyQg-ymzXR4dO2nV0mkSzKsTcdbdbyZ6cIP-b_
' URL: http://www.plantuml.com/plantuml/uml/jLXjSnCt4FwUNt4p_MBNBqD2eQs7Pd1ijxWJGx1Dse5X6FbEs88xoKWw4qBfR-zAEkcayvtZCl0byUskzaNxx6gbnq8YBlCiFH7l2TqYZh8eJf4GGoavMUKIJsD65-GMH_TEDYJ1KKnudEAJ4oqLBKYMfoX6BFfy4aKzdgD1DC-H-YrnYXnx42tzJyN_a2CgIO8IF4Ct94FNcCHvoiGW8bGg0VY7-GwbR4e5vbg9um21q0GeAyPIZAYY2gjzACaE1IoEG3W3r_J_qFe8SSx4K1aZZ6iRqMyGBGZru4_7ETsoqNMZGx5reuEHTQFwkDhA5izfgps8TemaPPpyATinxQNFOolGSiMeP6AC9rHob235loH2FXhX59mvLofLJhcrv2deG5ubeNazauYftMD5BhUoWscCEQWijyLRjiRoUNLZPOvI9MDo1veNGPvyzLyihFHI0wdFW519uY-HyXSbbGoHn872nzuEfopMJZXsGZZMUpqsFnGjrjkaFHn4PiyK6Upjs1tuqT0mIIbXKJ5Raz9EndOamn09zvE9DnEXCpZ74hKasJBZZL4Jk58g6B5ibYU8ngW8gPLW0IbbDXRFGBaATd-ROd505e4dEom4ME3vBLBBM6lBOJtXh2JLhCGYPka6yn7A2Dsm1OAzEBnoIjyodg6OOL4iqdgeIZQ0hA298pHftE-hEtUreZS965UOPqGXL9YDzfIPpIuqIRp6N2-FKGhr2zveMyQNkCYFeNKZodOs3GvYRHzKLiaLPwed64Oh47c7L8B6JFnEe5kmjqoq62Thd9LcOXDLMERTI2YVxdJ6jGwUO0gUG6UuIDc770CO9RjayVjGhxTaLSWjMG9UtI6SaXNcnybsT6gcYMjlHPT8y5j22NV0RWp6A1YLXHnigTNZyskAtlDTjykmsRgkj8yktQB-hKsAOWHfKOIz9WIwqKgLVYoZelLfOTFxKb2BN0U3siefEjpGbEC3qpvrUnJ5oH2q429yq7iCqzGCCalRWBhISZUgseK3RS-AejNOQ1TdnANIxMKRI2Dj8gJPxBVz6BMmpOyDj2CiqTy13oKSGmV49h5Zh_ZAyyuxGhtJpW-ZmYfGxcknLUBJfEww5nvd_xJJximO9P9na_dCV02ae7ZWiAFuOpJ7MFb8fQArsfM45Sk_Nzw-TRmBd26ef-AO5yNN85BqxOPnN8JjlbkdrPYjYkyALcUaxVdsRJUaSCxkX9gVcElVHRdhi6r5rCYKxleihw0aMy18JzSw3lshT02cbm9tSFYJsnbAD-YQ84xyxjNRXjCciDZsqpFw5oSI3s4c_EJtlo9xjIBd1hswLaMJ6iKyHelU60YWXVY770OtxRmDiHlbCCSi7BWgkPrLmorFZrUlNxrMKYWXCM7K7Wf7z9Sc6TkuX3RI7BCUphKF-eH6v8PLnetWY2j5Hp1N72Ufq47aaS8J0SZbIREqWz7I3QuQJHqtkryFNqwV-ODxoPeiblFXUFXcD9qDhSHfhSHuEfzCbqxeh5ReOZZzsrcwNoioMJn_CPcFdQAV0gdH_CNBuMpoTFaiSEb1ar35guTDSe5ZFpT9LNtxvP1lRoPLwx_U8LvLVthlZh1WJU3uwUd1-EfCd7duu6W5jSQM6uvH8Xu-I4HIGKg628LANWjRmQzUxyrXkbwl4CMfRLgrxMevd0sVFe7O9vSlBfq_zysz4IuOCCLfMJ0rGrixyNUZQORM-jd3TfydI6oKXDzmIXzQDUPLyz0z1ganazm69y8FMuWH1fuC-YaqwzPw4Ft1uLWXiQZUxqUi65shTq8uvlQAaQMCsxQArt2lzsCCdnL8QTxdTF9jWYJUdtpL0yUKGYD4nPQl93NVt7i6UOTswAOlFaBM-dzUv58oFLM-0rihTi5kJYiYblx8PFey43uxHlWIhN1QLQk99VliCFl-OVPFXzbB8lEKDSeijeHIpAiU5cHVvAnPHEFDou11OMCIwt8pZ2MSON3pLHSOdBJmJXfxVVHHzl4ELFIDp4JzzX3nlmepU0VpQbFNoS2hs-fxZIX1zAtU264N9jMdgaQ8Wl2L_qxMZ6NjVZMVBYR3FcjYkqpMlIb-_QkX7cHSEsfND_eWKeAmlnecjRlzzThi6-FacgN-Ina0hOJNZxsUXaz82P-PpJkYbIo_x7Mof1J7XY7q--TrBrCrztzMBgtXzdhdTt2T8sPg2dmhIUQQ6ruJUxr_dFAGexmFbRYhrluYn_9NgUk0jodgazLyQg-ymzXR4dO2nV0mkSzKsTcdbdbyZ6cIP-b_
' Generated on: 2025-10-23T15:30:29.864258200

@startuml
skinparam classAttributeIconSize 0
hide circle

class Simulacao {
  -rua: Rua
  -telaSimulacao: TelaSimulacao
  -quantidadeMaximaVeiculos: int
  -intervaloInsercao: int
  -inserindo: boolean
  -simulacaoAtiva: boolean
  -random: Random
  -quantidadeCarrosAnterior: int = 0
  --
  +Simulacao(rua: Rua, telaSimulacao: TelaSimulacao, quantidadeMaximaVeiculos: int, intervaloInsercao: int)
  +run(): void
  -inserirNovoCarro(): void
  -obterPontosDeEntrada(): List<Celula>
  +pararInsercao(): void
  +continuarInsercao(): void
  +isInserindo(): boolean
  +encerrarSimulacao(): void
  +getQuantidadeCarrosAtual(): int
  +isSimulacaoAtiva(): boolean
}

class Carro {
  -contador: int = 0
  -id: int
  -rua: Rua
  -velocidade: int
  -direcao: Direcao
  -celulaAtual: Celula
  -ativo: boolean
  -random: Random
  --
  +Carro(rua: Rua, velocidade: int)
  +run(): void
  +movimentar(): void
  -ehEstradaReta(tipoCelula: int): boolean
  -movimentarComMudancaDirecao(destino: Celula): void
  -movimentarSimples(destino: Celula): void
  -atravessarCruzamento(primeiroCruzamento: Celula): void
  -escolherCaminhoSaida(primeiroCruzamento: Celula): InformacoesCaminho
  -encontrarCaminhosSaida(primeiroCruzamento: Celula): List<InformacoesCaminho>
  -obterDirecoesPermitidas(tipoCruzamento: int): List<Integer>
  -calcularCelulaSaida(celula: Celula, novaDirecao: Direcao): Celula
  -calcularProximaCelula(): Celula
  -jantarDosFilosofos(origem: Celula, caminho: List<Celula>, saida: Celula, novaDirecao: Direcao): void
  -ordenarParaBloquear(toLock: List<Celula>): void
  -bloquearTodos(toLock: List<Celula>): void
  -liberarTodos(toLock: List<Celula>): void
  +obterIdCarro(): int
  +definirDirecao(direcao: Direcao): void
  +obterCelulaAtual(): Celula
  +definirCelulaAtual(celulaAtual: Celula): void
  -pararCarro(): void
}

class InformacoesCaminho {
  -caminho: List<Celula>
  -saida: Celula
  -direcao: Direcao
}

abstract class Celula {
  -linha: int
  -coluna: int
  -direcao: Direcao
  -carro: Carro
  -isEntrada: boolean
  -isCruzamento: boolean
  --
  +Celula(linha: int, coluna: int, direcao: Direcao, isEntrada: boolean, isCruzamento: boolean)
  +getLinha(): int
  +getColuna(): int
  +getDirecao(): Direcao
  +getCarro(): Carro
  +setCarro(carro: Carro): void
  +removerCarroDaCelula(): void
  +isEntrada(): boolean
  +isCruzamento(): boolean
  +liberar(): void
  +bloquear(): void
  +tentarBloquear(): boolean
}

class CelulaMonitor {
  -monitor: Lock = new ReentrantLock()
  --
  +CelulaMonitor(linha: int, coluna: int, direcao: Direcao, isEntrada: boolean, isCruzamento: boolean)
  +liberar(): void
  +bloquear(): void
  +tentarBloquear(): boolean
}

class CelulaSemaforo {
  -semaforo: Semaphore = new Semaphore(1)
  --
  +CelulaSemaforo(linha: int, coluna: int, direcao: Direcao, isEntrada: boolean, isCruzamento: boolean)
  +getSemaforo(): Semaphore
  +liberar(): void
  +bloquear(): void
  +tentarBloquear(): boolean
}

class Direcao {
  -sentidoDirecao: int
  --
  +Direcao(sentidoDirecao: int)
  +getSentidoDirecao(): int
  +toString(): String
}

class Rua {
  -matrizMalhaViaria: Celula
  -pontosDeEntrada: CopyOnWriteArrayList<Celula> = new CopyOnWriteArrayList<>()
  -carros: CopyOnWriteArrayList<Carro> = new CopyOnWriteArrayList<>()
  --
  +Rua(arquivoMalha: String, usarSemaforo: boolean)
  +getMatrizMalhaViaria(): Celula[][]
  +adicionarCarro(carro: Carro): void
  +removerCarro(carro: Carro): void
  +getCarros(): CopyOnWriteArrayList<Carro>
  +celulaParaBaixo(celula: Celula): Celula
  +celulaParaCima(celula: Celula): Celula
  +celulaParaDireita(celula: Celula): Celula
  +celulaParaEsquerda(celula: Celula): Celula
}

class TipoCelula {
  + VAZIO: int = 0
  + ESTRADA_CIMA: int = 1
  + ESTRADA_DIREITA: int = 2
  + ESTRADA_BAIXO: int = 3
  + ESTRADA_ESQUERDA: int = 4
  + CRUZAMENTO_CIMA: int = 5
  + CRUZAMENTO_DIREITA: int = 6
  + CRUZAMENTO_BAIXO: int = 7
  + CRUZAMENTO_ESQUERDA: int = 8
  + CRUZAMENTO_CIMA_E_DIREITA: int = 9
  + CRUZAMENTO_CIMA_E_ESQUERDA: int = 10
  + CRUZAMENTO_DIREITA_E_BAIXO: int = 11
  + CRUZAMENTO_BAIXO_E_ESQUERDA: int = 12
}

class TrabalhoThreads65dsd {
  + main(args: String[]): void
}

class MalhaPanel {
  -malhaViaria: Celula
  -TAMANHO_CELULA: int = 30
  -iconesCelulas: Map<Integer, ImageIcon> = new HashMap<>()
  --
  +MalhaPanel(malhaViaria: Celula[][])
  +atualizar(): void
  #paintComponent(g: Graphics): void
  -obterCorCelula(tipoCelula: int, celula: Celula): Color
  -carregarIconesCelulas(): void
  -initComponents(): void
  +update(): void
}

class TelaInicial {
  -btnIniciarSimulacao: javax.swing.JButton
  -jComboBox1: javax.swing.JComboBox<String>
  -jComboBox2: javax.swing.JComboBox<String>
  -jLabel1: javax.swing.JLabel
  -jLabel2: javax.swing.JLabel
  -jLabel3: javax.swing.JLabel
  -jLabel4: javax.swing.JLabel
  -jLabelTitulo: javax.swing.JLabel
  -jSpinner1: javax.swing.JSpinner
  -jSpinner2: javax.swing.JSpinner
  --
  +TelaInicial()
  -initComponents(): void
  -btnIniciarSimulacaoActionPerformed(evt: java.awt.event.ActionEvent): void
  +{static} main(args: String[]): void
}

class TelaSimulacao {
  -malhaPanel: MalhaPanel
  -rua: Rua
  -simulacao: Simulacao
  -quantidadeMaximaVeiculos: int
  -intervaloInsercao: int
  -btnEncerrarSimulacao: javax.swing.JButton
  -btnPararInsercao: javax.swing.JButton
  -jPanel1: javax.swing.JPanel
  -jPanel2: javax.swing.JPanel
  --
  +TelaSimulacao(rua: Rua, quantidadeMaximaVeiculos: int, intervaloInsercao: int)
  +getMalhaPanel(): MalhaPanel
  -initComponents(): void
  -btnPararInsercaoActionPerformed(evt: java.awt.event.ActionEvent): void
  -btnEncerrarSimulacaoActionPerformed(evt: java.awt.event.ActionEvent): void
  -encerrarEVoltar(): void
}

Simulacao *-- Rua
Simulacao *-- TelaSimulacao
Carro *-- Rua
Carro *-- Direcao
Carro *-- Celula
Carro ..> InformacoesCaminho
InformacoesCaminho o-- Celula
InformacoesCaminho --> Celula
InformacoesCaminho --> Direcao
Celula *-- Direcao
Celula *-- Carro
CelulaMonitor --|> Celula
CelulaMonitor ..> Direcao
CelulaSemaforo --|> Celula
CelulaSemaforo ..> Direcao
Rua *-- Celula
Rua o-- Celula
Rua o-- Carro
MalhaPanel *-- Celula
TelaSimulacao *-- MalhaPanel
TelaSimulacao *-- Rua
TelaSimulacao *-- Simulacao
@enduml